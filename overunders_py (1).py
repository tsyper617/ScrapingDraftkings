# -*- coding: utf-8 -*-
"""OverUnders.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bG-Dfp1eWotu-8CLX7I5lJcdEchkb5cw
"""

import requests
from bs4 import BeautifulSoup

def probability_to_american_odds(probability):
    if probability == 0:
        return "N/A"  # Avoid division by zero error

    odds = 1 / probability - 1
    if odds >= 1:
        return f"+{int(odds * 100)}"
    else:
        return f"-{int(100 / odds)}"

def get_probability_over_under_threshold(player_lastname, player_firstname, year, threshold):
    # Construct the URL based on the player's information and the year
    player_code = f"{player_lastname[:1]}/{player_lastname[:5]}{player_firstname[:2]}01"
    url = f"https://www.basketball-reference.com/players/{player_code}/gamelog/{year}"

    # Send a GET request to the constructed URL
    response = requests.get(url)

    if response.status_code == 200:
        # Parse the HTML content using Beautiful Soup
        soup = BeautifulSoup(response.content, 'html.parser')

        # Find the table containing game logs data
        table = soup.find('table', {'id': 'pgl_basic'})

        if table:
            # Find all 'td' elements with class 'right' and attribute 'data-stat="pts"'
            points = table.find_all('td', {'class': 'right', 'data-stat': 'pts'})

            # Extract points scored for each game into an array
            points_array = [int(point.text.strip()) for point in points]

            # Calculate the number of games where the total points exceed the threshold
            over_threshold = sum(1 for point in points_array if point > threshold)
            probability_over = over_threshold / len(points_array)
            american_odds_over = probability_to_american_odds(probability_over)

            # Calculate the number of games where the total points are under or equal to the threshold
            under_threshold = sum(1 for point in points_array if point <= threshold)
            probability_under = under_threshold / len(points_array)
            american_odds_under = probability_to_american_odds(probability_under)

            print(f"Probability of going over {threshold} points: {probability_over:.2f}")
            print(f"American Odds for going over {threshold} points: {american_odds_over}")

            print(f"\nProbability of going under or equal to {threshold} points: {probability_under:.2f}")
            print(f"American Odds for going under {threshold} points: {american_odds_under}")
        else:
            print('Game logs table not found on the page.')
    else:
        print('Failed to retrieve the game logs')

# Example usage: Get probabilities and American odds for over and under a point threshold
get_probability_over_under_threshold("Marshall", "Naji", 2024, 4.5)

import requests
from bs4 import BeautifulSoup

# Put your game URL here
url = 'https://sportsbook.draftkings.com/event/la-clippers-%40-no-pelicans/29921989?category=odds&subcategory=player-points'

response = requests.get(url)
global players_data


if response.status_code == 200:
    print('Success! Status Code:', response.status_code)
    soup = BeautifulSoup(response.content, 'html.parser')

    #global players_data
    players_data = {}

    # Find all player names and store them in a list
    for row in soup.find_all('span', class_='sportsbook-row-name'):
        player_name = row.text.strip()
        players_data[player_name] = {'Over': {}, 'Under': {}}  # Initialize player's data

    for row in soup.find_all('tr'):
        player_name_tag = row.find('span', class_='sportsbook-row-name')
        over_label_tag = row.find('span', class_='sportsbook-outcome-cell__label', text='O')
        under_label_tag = row.find('span', class_='sportsbook-outcome-cell__label', text='U')

        if player_name_tag:
            player_name = player_name_tag.text.strip()

            if over_label_tag:
                over_line_tag = over_label_tag.find_next('span', class_='sportsbook-outcome-cell__line')
                over_odds_tag = over_line_tag.find_next('span', class_='sportsbook-odds')
                if over_line_tag and over_odds_tag:
                    over_line = over_line_tag.text
                    over_odds = over_odds_tag.text
                    players_data[player_name]['Over'] = {
                        'Points': over_line,
                        'American Odds': over_odds
                    }

            if under_label_tag:
                under_line_tag = under_label_tag.find_next('span', class_='sportsbook-outcome-cell__line')
                under_odds_tag = under_line_tag.find_next('span', class_='sportsbook-odds')
                if under_line_tag and under_odds_tag:
                    under_line = under_line_tag.text
                    under_odds = under_odds_tag.text
                    players_data[player_name]['Under'] = {
                        'Points': under_line,
                        'American Odds': under_odds
                    }

            # Check if the current player is the last player stored in players_data
            if player_name == list(players_data.keys())[-1]:
                break  # Stop the loop once the last player is processed

    # Printing the collected data
    for player, data in players_data.items():
        print(f"Player: {player}")
        print(f"Over: {data['Over']['Points']} | American Odds: {data['Over']['American Odds']}")
        print(f"Under: {data['Under']['Points']} | American Odds: {data['Under']['American Odds']}")
else:
    print('Failed to retrieve the page. Status Code:', response.status_code)